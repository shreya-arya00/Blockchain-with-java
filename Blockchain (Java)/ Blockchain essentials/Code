package blockchain;

import java.security.MessageDigest;
import java.util.ArrayList;

class StringUtil {
    /* Applies Sha256 to a string and returns a hash. */
    public static String applySha256(String input){
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            /* Applies sha256 to our input */
            byte[] hash = digest.digest(input.getBytes("UTF-8"));
            StringBuilder hexString = new StringBuilder();
            for (byte elem: hash) {
                String hex = Integer.toHexString(0xff & elem);
                if(hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        }
        catch(Exception e) {
            throw new RuntimeException(e);
        }
    }
}

class Block {
    private long id;
    private long timestamp;
    private String hash;
    private String previousBlockHash;

    public Block(long id, long timestamp, String hash, String previousBlockHash) {
        this.id = id;
        this.timestamp = timestamp;
        this.hash = hash;
        this.previousBlockHash = previousBlockHash;
    }

    public Block(long id, long timestamp, String previousBlockHash) {
        this.id = id;
        this.timestamp = timestamp;
        this.previousBlockHash = previousBlockHash;
        this.hash = StringUtil.applySha256(id + timestamp + previousBlockHash);
    }

    public long getTimestamp() {
        return timestamp;
    }

    public String getHash() {
        return hash;
    }

    public String getPreviousBlockHash() {
        return previousBlockHash;
    }

    public long getId() {
        return id;
    }

    public void printBlock() {
        System.out.println("Block:");
        System.out.println("Id: " + id);
        System.out.println("Timestamp: " + timestamp);
        System.out.println("Hash of the previous block: ");
        System.out.println(previousBlockHash);
        System.out.println("Hash of the block: ");
        System.out.println(hash + "\n");
    }
}

class Blockchain {
    private ArrayList<Block> blockchain;

    public Blockchain() {
        blockchain = new ArrayList<Block>();
        blockchain.add(new Block(0, System.currentTimeMillis(), "0"));
    }

    public void addBlock(Block block) {
        blockchain.add(block);
    }

    public Block getLatestBlock() {
        return blockchain.get(blockchain.size() - 1);
    }

    public Block getNewBlock(long id, long timestamp, String previousBlockHash) {
        return new Block(id, timestamp, previousBlockHash);
    }

    public ArrayList<Block> getBlockchain() {
        return blockchain;
    }
}

public class Main {
    public static void main(String[] args) {
        Blockchain blockchain = new Blockchain();
        for (int i = 1; i < 5; i++) {
            Block newBlock = blockchain.getNewBlock(i, System.currentTimeMillis(), blockchain.getLatestBlock().getHash());
            blockchain.addBlock(newBlock);
        }
        for (Block block: blockchain.getBlockchain()) {
            block.printBlock();
        }
    }
}

